name: "CI/CD Pipeline - Development"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"
  APP_NAME: "ecommerce-stacks"

jobs:
  # ==========================================
  # BUILD & TEST JOB
  # ==========================================
  build-and-test:
    name: "Build & Test"
    runs-on: self-hosted

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Cache NuGet packages"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "Restore Dependencies"
        run: dotnet restore Ecommerce.Stacks.sln

      - name: "Build Solution"
        run: dotnet build Ecommerce.Stacks.sln --configuration Release --no-restore

      - name: "Run Unit Tests"
        run: |
          dotnet test Ecommerce.Stacks.sln --configuration Release --no-build --verbosity normal

      - name: "Publish Build Artifacts"
        run: |
          dotnet publish src/Ecom.Gateway.API/Ecom.Gateway.API.csproj -c Release -o ./artifacts/gateway

      - name: "Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts/

  # ==========================================
  # .NET DEPLOY JOB
  # ==========================================
  deploy-development:
    name: "Deploy to Development"
    runs-on: self-hosted
    needs: build-and-test

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Download Build Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts/

      - name: "Setup Environment"
        run: |
          # Copy environment file
          cp .env.example .env

          # Ensure logs directory exists
          mkdir -p ./src/Ecom.Gateway.API/logs

          # Make artifacts executable
          chmod +x ./artifacts/gateway/Ecom.Gateway.API

          # Set environment variables
          echo "ASPNETCORE_ENVIRONMENT=Development" >> $GITHUB_ENV
          echo "ASPNETCORE_URLS=http://localhost:5300;https://localhost:5301" >> $GITHUB_ENV

      - name: "Run .NET Application"
        run: |
          # Kill any existing process on the ports
          sudo lsof -ti:5300,5301 | xargs -r sudo kill -9

          # Start the .NET application in the background
          cd ./artifacts/gateway
          nohup ./Ecom.Gateway.API > app.log 2>&1 &
          echo $! > ./app.pid

          # Wait for application to start
          echo "Waiting for the application to start..."
          sleep 10

      - name: "Health Check"
        run: |
          # Wait for gateway to be healthy
          echo "Checking gateway health..."
          timeout 60s bash -c 'until curl -s -f http://localhost:5300/health; do echo "Waiting for gateway..."; sleep 5; done' || echo "Gateway health check timeout"

      - name: "Show Service URLs"
        run: |
          echo "ðŸš€ Development deployment completed!"
          echo ""
          echo "ðŸ“‹ Service URLs:"
          echo "  â€¢ API Gateway: http://localhost:5300"
          echo "  â€¢ Swagger UI: http://localhost:5300/swagger"
  # ==========================================
  # CLEANUP JOB
  # ==========================================
  cleanup:
    name: "Cleanup"
    runs-on: self-hosted
    needs: deploy-development
    if: always()

    steps:
      - name: "Stop .NET Application"
        run: |
          # Stop any running .NET application on ports 5300 and 5301
          sudo lsof -ti:5300,5301 | xargs -r sudo kill -9

          # If we have a PID file, use it to stop the app
          if [ -f ./artifacts/gateway/app.pid ]; then
            pid=$(cat ./artifacts/gateway/app.pid)
            kill -15 $pid 2>/dev/null || true
            rm ./artifacts/gateway/app.pid
          fi

      - name: "Archive Logs"
        run: |
          # Create logs archive directory
          mkdir -p ./logs/archive/$(date +%Y%m%d)

          # Copy current logs
          cp -r ./src/Ecom.Gateway.API/logs/* ./logs/archive/$(date +%Y%m%d)/ 2>/dev/null || true

          # Compress old logs (older than 7 days)
          find ./logs/archive -name "*.txt" -mtime +7 -exec gzip {} \; 2>/dev/null || true
