name: "CI/CD Pipeline - gateway Service"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"
  APP_NAME: "ecommerce-gateway"
  API_PORT: 5500
  PUBLISH_PATH: "./publish"
  APP_PATH: "src/Ecom.Gateway.API"

jobs:
  # ==========================================
  # BUILD & TEST JOB
  # ==========================================
  build-and-test:
    name: "Build & Test"
    runs-on: self-hosted

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Cache NuGet packages"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "Restore Dependencies"
        run: dotnet restore

      - name: "Build Solution"
        run: dotnet build --configuration Release --no-restore

      - name: "Run Unit Tests"
        run: |
          dotnet test --configuration Release --no-build --verbosity normal

      - name: "Publish Application"
        run: |
          dotnet publish ${{ env.APP_PATH }} --configuration Release --output ${{ env.PUBLISH_PATH }} --no-build

      - name: "Upload Published App"
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ${{ env.PUBLISH_PATH }}
          retention-days: 1

  # ==========================================
  # DEPLOY JOB
  # ==========================================
  deploy:
    name: "Deploy to Development"
    runs-on: self-hosted
    needs: build-and-test

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Download Published App"
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ${{ env.PUBLISH_PATH }}

      - name: "Ensure .NET is Available"
        run: |
          # Ensure .NET is in PATH for deployment
          if ! command -v dotnet &> /dev/null; then
            export PATH="$HOME/.dotnet:$PATH"
            echo 'export PATH="$HOME/.dotnet:$PATH"' >> ~/.bashrc
          fi
          
          # Verify .NET is available
          dotnet --version || {
            echo "❌ .NET not found in PATH"
            exit 1
          }

      - name: "Setup Environment"
        run: |
          # Ensure logs directory exists
          mkdir -p ./logs

      - name: "Stop Existing Application"
        run: |
          # Find and kill existing process
          PROCESS_ID=$(ps aux | grep "Ecom.Gateway.API" | grep -v grep | awk '{print $2}' | head -1)
          if [ ! -z "$PROCESS_ID" ]; then
            echo "Stopping existing application (PID: $PROCESS_ID)..."
            kill -TERM $PROCESS_ID
            sleep 5
            # Force kill if still running
            if kill -0 $PROCESS_ID 2>/dev/null; then
              kill -KILL $PROCESS_ID
            fi
            echo "Application stopped."
          else
            echo "No existing application process found."
          fi

      - name: "Deploy Application"
        run: |
          echo "Starting application deployment..."
          
          # Set environment variables
          export ASPNETCORE_ENVIRONMENT=Development
          export ASPNETCORE_URLS=http://localhost:${{ env.API_PORT }}
          
          # Verify publish directory exists
          if [ ! -d "${{ env.PUBLISH_PATH }}" ]; then
            echo "❌ Publish directory not found!"
            exit 1
          fi
          
          # List contents of publish directory
          echo "Contents of publish directory:"
          ls -la ${{ env.PUBLISH_PATH }}
          
          # Start application in background
          cd ${{ env.PUBLISH_PATH }}
          
          # Start with more verbose logging
          echo "Starting application..."
          nohup dotnet Ecom.Gateway.API.dll > ../logs/app.log 2>&1 &
          
          # Get process ID
          APP_PID=$!
          echo "Application started with PID: $APP_PID"
          echo $APP_PID > ../app.pid
          
          # Wait a moment for startup and check logs
          sleep 5
          echo "Initial logs:"
          head -20 ../logs/app.log || echo "No logs found yet"
          
          # Wait a bit more
          sleep 5

      - name: "Show Application Status"
        run: |
          echo "🚀 Development deployment completed!"
          echo ""
          echo "Application Status:"
          if [ -f "./app.pid" ]; then
            APP_PID=$(cat ./app.pid)
            ps -p $APP_PID -o pid,ppid,cmd --no-headers
          fi
          echo ""
          echo "Recent Logs:"
          tail -20 ./logs/app.log
          echo ""
          echo "Service URLs:"
          echo "  • API: http://localhost:${{ env.API_PORT }}"
          echo "  • Swagger UI: http://localhost:${{ env.API_PORT }}/swagger"

  # ==========================================
  # CLEANUP JOB
  # ==========================================
  cleanup:
    name: "Cleanup"
    runs-on: self-hosted
    needs: deploy
    if: always()

    steps:
      - name: "Archive Logs"
        run: |
          # Create logs archive directory
          mkdir -p ./logs/archive/$(date +%Y%m%d)

          # Copy current logs
          cp -r ./logs/* ./logs/archive/$(date +%Y%m%d)/ 2>/dev/null || true

          # Compress old logs (older than 7 days)
          find ./logs/archive -name "*.txt" -mtime +7 -exec gzip {} \; 2>/dev/null || true
          find ./logs/archive -name "*.log" -mtime +7 -exec gzip {} \; 2>/dev/null || true

      - name: "Cleanup Build Artifacts"
        run: |
          # Remove old publish directories
          find . -name "publish" -type d -mtime +3 -exec rm -rf {} \; 2>/dev/null || true
          
          # Clean up temporary files
          rm -f ./app.pid 2>/dev/null || true
