name: "CI/CD Pipeline - gateway Service"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"
  APP_NAME: "ecommerce-gateway"
  API_PORT: 5500
  PUBLISH_PATH: "./publish"
  APP_PATH: "src/Ecom.Gateway.API"
  SERVICE_NAME: "ecommerce-gateway"
  SERVICE_USER: "www-data"
  INSTALL_PATH: "/opt/ecommerce-gateway"

jobs:
  # ==========================================
  # BUILD & TEST JOB
  # ==========================================
  build-and-test:
    name: "Build & Test"
    runs-on: self-hosted

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Cache NuGet packages"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "Restore Dependencies"
        run: dotnet restore

      - name: "Build Solution"
        run: dotnet build --configuration Release --no-restore

      - name: "Run Unit Tests"
        run: |
          dotnet test --configuration Release --no-build --verbosity normal

      - name: "Publish Application"
        run: |
          dotnet publish ${{ env.APP_PATH }} --configuration Release --output ${{ env.PUBLISH_PATH }} --no-build

      - name: "Upload Published App"
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ${{ env.PUBLISH_PATH }}
          retention-days: 1

  # ==========================================
  # DEPLOY JOB
  # ==========================================
  deploy:
    name: "Deploy to Development"
    runs-on: self-hosted
    needs: build-and-test

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Download Published App"
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: ${{ env.PUBLISH_PATH }}

      - name: "Setup Environment"
        run: |
          # Ensure logs directory exists
          sudo mkdir -p /var/log/${{ env.SERVICE_NAME }}
          sudo mkdir -p ${{ env.INSTALL_PATH }}
          
          # Set proper permissions
          sudo chown -R ${{ env.SERVICE_USER }}:${{ env.SERVICE_USER }} /var/log/${{ env.SERVICE_NAME }}

      - name: "Stop Existing Service"
        run: |
          # Stop the systemd service if it exists
          if sudo systemctl is-active --quiet ${{ env.SERVICE_NAME }}; then
            echo "Stopping existing service..."
            sudo systemctl stop ${{ env.SERVICE_NAME }}
            echo "Service stopped."
          else
            echo "Service is not running."
          fi

      - name: "Deploy Application"
        run: |
          echo "Deploying application files..."
          
          # Verify publish directory exists
          if [ ! -d "${{ env.PUBLISH_PATH }}" ]; then
            echo "❌ Publish directory not found!"
            exit 1
          fi
          
          # Copy application files to install directory
          sudo cp -r ${{ env.PUBLISH_PATH }}/* ${{ env.INSTALL_PATH }}/
          
          # Set proper permissions
          sudo chown -R ${{ env.SERVICE_USER }}:${{ env.SERVICE_USER }} ${{ env.INSTALL_PATH }}
          sudo chmod +x ${{ env.INSTALL_PATH }}/Ecom.Gateway.API.dll

      - name: "Create Systemd Service File"
        run: |
          # Create systemd service file
          sudo tee /etc/systemd/system/${{ env.SERVICE_NAME }}.service > /dev/null <<EOF
          [Unit]
          Description=Ecommerce Gateway API Service
          After=network.target
          Wants=network.target
          
          [Service]
          Type=notify
          User=${{ env.SERVICE_USER }}
          Group=${{ env.SERVICE_USER }}
          WorkingDirectory=${{ env.INSTALL_PATH }}
          ExecStart=/usr/bin/dotnet ${{ env.INSTALL_PATH }}/Ecom.Gateway.API.dll
          Restart=always
          RestartSec=10
          KillSignal=SIGINT
          SyslogIdentifier=${{ env.SERVICE_NAME }}
          
          # Environment variables
          Environment=ASPNETCORE_ENVIRONMENT=Development
          Environment=ASPNETCORE_URLS=http://localhost:${{ env.API_PORT }}
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
          
          # Security settings
          NoNewPrivileges=true
          PrivateTmp=true
          ProtectSystem=strict
          ReadWritePaths=/var/log/${{ env.SERVICE_NAME }}
          
          # Logging
          StandardOutput=append:/var/log/${{ env.SERVICE_NAME }}/app.log
          StandardError=append:/var/log/${{ env.SERVICE_NAME }}/error.log
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          echo "Systemd service file created."

      - name: "Start Service"
        run: |
          # Reload systemd daemon
          sudo systemctl daemon-reload
          
          # Enable service to start on boot
          sudo systemctl enable ${{ env.SERVICE_NAME }}
          
          # Start the service
          sudo systemctl start ${{ env.SERVICE_NAME }}
          
          # Wait for service to start
          sleep 5
          
          echo "Service started successfully."

      - name: "Show Application Status"
        run: |
          echo "🚀 Development deployment completed!"
          echo ""
          echo "Service Status:"
          sudo systemctl status ${{ env.SERVICE_NAME }} --no-pager -l
          echo ""
          echo "Recent Logs:"
          sudo journalctl -u ${{ env.SERVICE_NAME }} --no-pager -n 20
          echo ""
          if [ -f "/var/log/${{ env.SERVICE_NAME }}/app.log" ]; then
            echo "Application Logs:"
            sudo tail -10 /var/log/${{ env.SERVICE_NAME }}/app.log
          fi
          echo ""
          echo "Service URLs:"
          echo "  • API: http://localhost:${{ env.API_PORT }}"
          echo "  • Swagger UI: http://localhost:${{ env.API_PORT }}/swagger"
          echo ""
          echo "Service Management Commands:"
          echo "  • Status: sudo systemctl status ${{ env.SERVICE_NAME }}"
          echo "  • Stop: sudo systemctl stop ${{ env.SERVICE_NAME }}"
          echo "  • Start: sudo systemctl start ${{ env.SERVICE_NAME }}"
          echo "  • Restart: sudo systemctl restart ${{ env.SERVICE_NAME }}"
          echo "  • Logs: sudo journalctl -u ${{ env.SERVICE_NAME }} -f"

  # ==========================================
  # CLEANUP JOB
  # ==========================================
  cleanup:
    name: "Cleanup"
    runs-on: self-hosted
    needs: deploy
    if: always()

    steps:
      - name: "Archive Logs"
        run: |
          # Create logs archive directory
          sudo mkdir -p /var/log/${{ env.SERVICE_NAME }}/archive/$(date +%Y%m%d)

          # Copy current logs
          sudo cp /var/log/${{ env.SERVICE_NAME }}/*.log /var/log/${{ env.SERVICE_NAME }}/archive/$(date +%Y%m%d)/ 2>/dev/null || true

          # Compress old logs (older than 7 days)
          sudo find /var/log/${{ env.SERVICE_NAME }}/archive -name "*.log" -mtime +7 -exec gzip {} \; 2>/dev/null || true

          # Clean up old archive directories (older than 30 days)
          sudo find /var/log/${{ env.SERVICE_NAME }}/archive -type d -mtime +30 -exec rm -rf {} \; 2>/dev/null || true

      - name: "Cleanup Build Artifacts"
        run: |
          # Remove old publish directories
          find . -name "publish" -type d -mtime +3 -exec rm -rf {} \; 2>/dev/null || true
          
          # Clean up temporary files
          sudo journalctl --vacuum-time=7d 2>/dev/null || true
