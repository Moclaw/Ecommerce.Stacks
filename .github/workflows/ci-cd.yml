name: "CI/CD Pipeline - Development"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0.x"
  APP_NAME: "ecommerce-stacks"
  DOCKER_IMAGE: "ecommerce-gateway"
  DOCKER_TAG: "latest"

jobs:
  # ==========================================
  # BUILD & TEST JOB
  # ==========================================
  build-and-test:
    name: "Build & Test"
    runs-on: self-hosted

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup .NET"
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: "Cache NuGet packages"
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: "Restore Dependencies"
        run: dotnet restore Ecommerce.Stacks.sln

      - name: "Build Solution"
        run: dotnet build Ecommerce.Stacks.sln --configuration Release --no-restore

      - name: "Run Unit Tests"
        run: |
          dotnet test Ecommerce.Stacks.sln --configuration Release --no-build --verbosity normal

      - name: "Build Docker Image"
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} -f src/Ecom.Gateway.API/Dockerfile .

  # ==========================================
  # DOCKER DEPLOY JOB
  # ==========================================
  deploy-development:
    name: "Deploy to Development"
    runs-on: self-hosted
    needs: build-and-test

    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Setup Environment"
        run: |
          # Copy environment file
          cp .env.example .env

          # Ensure directories exist
          mkdir -p ./logs ./keys

      - name: "Stop and Remove Existing Container"
        run: |
          # Check if container exists and stop it
          if docker ps -a --format '{{.Names}}' | grep -q "${{ env.DOCKER_IMAGE }}-container"; then
            echo "Stopping existing container..."
            docker stop ${{ env.DOCKER_IMAGE }}-container
            docker rm ${{ env.DOCKER_IMAGE }}-container
          else
            echo "No existing container found."
          fi

      - name: "Deploy with Docker"
        run: |
          echo "Starting container deployment..."
          
          # Run container with proper configuration
          docker run -d \
            --name ${{ env.DOCKER_IMAGE }}-container \
            --restart unless-stopped \
            -p 5500:5500 \
            -e ASPNETCORE_ENVIRONMENT=Development \
            -e ASPNETCORE_URLS="http://+:5500" \
            -e DOTNET_RUNNING_IN_CONTAINER=true \
            -v "$(pwd)/logs:/app/logs" \
            -v "$(pwd)/keys:/app/keys" \
            -v "$(pwd)/.env:/app/.env" \
            --network bridge \
            ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          
          # Display container info
          echo "Container started with ID: $(docker ps -q -f name=${{ env.DOCKER_IMAGE }}-container)"

      - name: "Show Container Status"
        run: |
          echo "ðŸš€ Development deployment completed!"
          echo ""
          echo "Docker Container Status:"
          docker ps --filter "name=${{ env.DOCKER_IMAGE }}-container"
          echo ""
          echo "Container Logs:"
          docker logs --tail 20 ${{ env.DOCKER_IMAGE }}-container
          echo ""
          echo "Service URLs:"
          echo "  â€¢ API Gateway: http://localhost:5500"
          echo "  â€¢ Swagger UI: http://localhost:5500/swagger"
          echo "  â€¢ Health Check: http://localhost:5500/health"

  # ==========================================
  # CLEANUP JOB
  # ==========================================
  cleanup:
    name: "Cleanup"
    runs-on: self-hosted
    needs: deploy-development
    if: always()

    steps:
      - name: "Stop Docker Container"
        run: |
          # Stop and remove container
          docker stop ${{ env.DOCKER_IMAGE }}-container 2>/dev/null || true
          docker rm ${{ env.DOCKER_IMAGE }}-container 2>/dev/null || true

      - name: "Archive Logs"
        run: |
          # Create logs archive directory
          mkdir -p ./logs/archive/$(date +%Y%m%d)

          # Copy current logs
          cp -r ./logs/* ./logs/archive/$(date +%Y%m%d)/ 2>/dev/null || true

          # Compress old logs (older than 7 days)
          find ./logs/archive -name "*.txt" -mtime +7 -exec gzip {} \; 2>/dev/null || true

      - name: "Cleanup Docker Images"
        run: |
          # Remove dangling images
          docker image prune -f
          # Stop and remove container
          docker stop ${{ env.DOCKER_IMAGE }}-container 2>/dev/null || true
          docker rm ${{ env.DOCKER_IMAGE }}-container 2>/dev/null || true

      - name: "Archive Logs"
        run: |
          # Create logs archive directory
          mkdir -p ./logs/archive/$(date +%Y%m%d)

          # Copy current logs
          cp -r ./logs/* ./logs/archive/$(date +%Y%m%d)/ 2>/dev/null || true

          # Compress old logs (older than 7 days)
          find ./logs/archive -name "*.txt" -mtime +7 -exec gzip {} \; 2>/dev/null || true

      - name: "Cleanup Docker Images"
        run: |
          # Remove dangling images
          docker image prune -f
