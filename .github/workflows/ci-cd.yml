name: 'CI/CD Pipeline - Development'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  APP_NAME: 'ecommerce-stacks'

jobs:
  # ==========================================
  # BUILD & TEST JOB
  # ==========================================
  build-and-test:
    name: 'Build & Test'
    runs-on: self-hosted
    
    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Setup .NET'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 'Cache NuGet packages'
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 'Restore Dependencies'
      run: dotnet restore Ecommerce.Stacks.sln

    - name: 'Build Solution'
      run: dotnet build Ecommerce.Stacks.sln --configuration Release --no-restore

    - name: 'Run Unit Tests'
      run: |
        dotnet test Ecommerce.Stacks.sln --configuration Release --no-build --verbosity normal

    - name: 'Publish Build Artifacts'
      run: |
        dotnet publish src/Ecom.Gateway.API/Ecom.Gateway.API.csproj -c Release -o ./artifacts/gateway

    - name: 'Upload Build Artifacts'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts/

  # ==========================================
  # DOCKER BUILD & DEPLOY
  # ==========================================
  deploy-development:
    name: 'Build & Deploy to Development'
    runs-on: self-hosted
    needs: build-and-test
    
    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4

    - name: 'Set up Docker Buildx'
      uses: docker/setup-buildx-action@v3

    - name: 'Setup Environment'
      run: |
        # Copy environment file
        cp .env.example .env
        
        # Ensure logs directory exists
        mkdir -p ./src/Ecom.Gateway.API/logs

    - name: 'Deploy with Docker Compose'
      run: |
        # Stop existing containers
        docker-compose down --remove-orphans
        
        # Build and start services
        docker-compose up -d --build
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30

    - name: 'Health Check'
      run: |
        # Check if all services are running
        docker-compose ps
        
        # Wait for gateway to be healthy
        echo "Checking gateway health..."
        timeout 120 bash -c 'until curl -f http://localhost:5000/health 2>/dev/null; do echo "Waiting for gateway..."; sleep 5; done' || echo "Gateway health check timeout"
        
        # Check database connections
        docker-compose exec -T postgres pg_isready -U ecommerce_user -d ecommerce_db || echo "PostgreSQL not ready"
        docker-compose exec -T redis redis-cli ping || echo "Redis not ready"

    - name: 'Show Service URLs'
      run: |
        echo "ðŸš€ Development deployment completed!"
        echo ""
        echo "ðŸ“‹ Service URLs:"
        echo "  â€¢ API Gateway: http://localhost:5000"
        echo "  â€¢ Swagger UI: http://localhost:5000/swagger"
        echo "  â€¢ Adminer (PostgreSQL): http://localhost:8081"
        echo "  â€¢ Mongo Express: http://localhost:8082"
        echo "  â€¢ Redis Commander: http://localhost:8083"
        echo "  â€¢ Kafka UI: http://localhost:8080"
        echo ""
        echo "ðŸ“Š Service Status:"
        docker-compose ps --format "table {{.Name}}\t{{.State}}\t{{.Ports}}"

  # ==========================================
  # CLEANUP JOB
  # ==========================================
  cleanup:
    name: 'Cleanup'
    runs-on: self-hosted
    needs: deploy-development
    if: always()
    
    steps:
    - name: 'Clean Docker System'
      run: |
        # Remove unused Docker resources
        docker system prune -f --volumes
        
        # Remove old images (keep latest 3)
        docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}" | grep ${{ env.APP_NAME }} | tail -n +4 | awk '{print $2}' | xargs -r docker rmi || true

    - name: 'Archive Logs'
      run: |
        # Create logs archive directory
        mkdir -p ./logs/archive/$(date +%Y%m%d)
        
        # Copy current logs
        cp -r ./src/Ecom.Gateway.API/logs/* ./logs/archive/$(date +%Y%m%d)/ 2>/dev/null || true
        
        # Compress old logs (older than 7 days)
        find ./logs/archive -name "*.txt" -mtime +7 -exec gzip {} \; 2>/dev/null || true
